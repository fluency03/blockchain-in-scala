package com.github.fluency03.blockchain
package crypto

import org.scalatest.{FlatSpec, Matchers}

class SHA256Test extends FlatSpec with Matchers {

  "SHA256" should "encode String to SHA256 and decode it back to original." in {
    SHA256.hash("open sesame") shouldEqual "41ef4bb0b23661e66301aac36066912dac037827b4ae63a7b1165a5aa93ed4eb"
    SHA256.hashAll("open", " ", "sesame") shouldEqual "41ef4bb0b23661e66301aac36066912dac037827b4ae63a7b1165a5aa93ed4eb"
    SHA256.hash("") shouldEqual "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    SHA256.hash("0000000000000000000000000000000000000000000000000000000000000") shouldEqual "a738b0b5c122d30af5b9da1c63c5d590a31aeafa7de1723ee9b5e3a11c9def35"

    SHA256.hash(("04b4d653fcbb4b96000c99343f23b08a44fa306031e0587f9e657ab4a25411" +
      "29368d7d9bb05cd8afbdf7705a6540d98028236965553f91bf1c5b4f70073f55b55d").hex2Bytes) shouldEqual
      "173BDED8F2A2069C193E63EA30DC8FD20E815EC3642B9C24AD7002C03D1BFB9B".toLowerCase

    SHA256.hashDigest(("04b4d653fcbb4b96000c99343f23b08a44fa306031e0587f9e657ab4a25411" +
      "29368d7d9bb05cd8afbdf7705a6540d98028236965553f91bf1c5b4f70073f55b55d").hex2Bytes) shouldEqual
      "173BDED8F2A2069C193E63EA30DC8FD20E815EC3642B9C24AD7002C03D1BFB9B".hex2Bytes

    SHA256.hash("0088C2D2FA846282C870A76CADECBE45C4ACD72BB6".hex2Bytes) shouldEqual
      "1F87490FC565C795595563D56412A0100CD1F29FFB60A3779789FE0C018C6164".toLowerCase

    SHA256.hash("1F87490FC565C795595563D56412A0100CD1F29FFB60A3779789FE0C018C6164".hex2Bytes) shouldEqual
      "55DA1216A5EF5BAE605B543A5A9CE2AC8A8FA1781AA037F35DE3F2222BAD8127".toLowerCase

    SHA256.hashDigest("00".hex2Bytes ++ "88C2D2FA846282C870A76CADECBE45C4ACD72BB6".hex2Bytes) shouldEqual
      "1F87490FC565C795595563D56412A0100CD1F29FFB60A3779789FE0C018C6164".hex2Bytes

    SHA256.hash(("048FEF639C6FA82AB575532B5B9A4552A6FDEFF141D788CDF3C7AFBA3" +
      "B26C6C34383088C705DF262F644BE0C3CA2C2E4319ADF3075397DF5E599F2B754E6AB667C").hex2Bytes) shouldEqual
      "0261107E41495C0DDC3850CD205D32896133EDD2ADDEBE7D8E20E01EFD078710".toLowerCase

    SHA256.hash("00A6020CF86FECEDEEF8859C172BAA1A15A575BC6F".hex2Bytes) shouldEqual
      "9C3AC7CD5D2673694C492CC508D788CBCACCDD357956EBCF10BD6C5BDF67AA5C".toLowerCase

    SHA256.hash("9C3AC7CD5D2673694C492CC508D788CBCACCDD357956EBCF10BD6C5BDF67AA5C".hex2Bytes) shouldEqual
      "27D7CF19837C3D3F713BDB483CB98A00D2917D5039D71348E90ADC68D2399F6D".toLowerCase

    SHA256.hash256("00010966776006953D5567439E5E39F86A0D273BEE".hex2Bytes) shouldEqual
      "D61967F63C7DD183914A4AE452C9F6AD5D462CE3D277798075B107615C1A8A30".toLowerCase

    SHA256.hash256Digest("00010966776006953D5567439E5E39F86A0D273BEE".hex2Bytes) shouldEqual
      "D61967F63C7DD183914A4AE452C9F6AD5D462CE3D277798075B107615C1A8A30".hex2Bytes

    SHA256.hash256("0045590A0195EB451711B9D076E4C0CD04675AAD55".hex2Bytes) shouldEqual
      "E816C7F2DD7F1E5521B1C3066B15D7331039C2447FA4F3AA5F35E28B2B949CE1".toLowerCase

    SHA256.hash256Digest("0045590A0195EB451711B9D076E4C0CD04675AAD55".hex2Bytes) shouldEqual
      "E816C7F2DD7F1E5521B1C3066B15D7331039C2447FA4F3AA5F35E28B2B949CE1".hex2Bytes

  }

}
